package com.pinata.client;

import java.util.UUID;

import com.pinata.shared.*;
import com.pinata.client.http.*;

/**
 * Android Client side UserSession object. Handles login, logout, and resuming
 * session.
 * @author Christian Gunderman
 */
public class UserSession {

    /** ID used to pass session headers between activities. */
    public static final String INTENT_EXTRA_ID
        = "PinataUserSessionIntentExtra";

    /** User who owns this session. */
    private String sessionUsername;

    /** Unique session Id generated by the server. DANGER: This is a secret. */
    private UUID sessionId;

    /**
     * Attempts to start a session with the server. a.k.a.: login.
     * @throws ClientException If unable to contact server, server response
     * is garbled, or server returned an error code. If server error,
     * ClientException contains the corresponding ApiException.
     * @param client RestClient.
     * @param username The user to login as.
     * @param password The password of the user to login.
     */
    public static UserSession start(RestClient client,
                                    String username,
                                    String password) throws ClientException {

        CreateUserSessionRequest request
            = new CreateUserSessionRequest(username, password);

        // Query server.
        UserSessionResponse response
            = UsersSessionsClient.doCreateUserSessionRequest(client, request);

        // Package as UserSession object. Throw if session ID isn't a UUID.
        try {
            return new UserSession(response.user, UUID.fromString(response.sessionId));
        } catch (IllegalArgumentException ex) {
            throw new ClientException(ClientStatus.HTTP_MALFORMED_RESPONSE);
        }
    }

    /**
     * Contacts the server and tells it to the end the current session.
     * a.k.a.: logout.
     * @throws ClientException If unable to contact server, server response
     * is garbled, or server returned an error code. If server error,
     * ClientException contains the corresponding ApiException.
     * @param client RestClient.
     */
    public void end(RestClient client) throws ClientException {
        UsersSessionsClient.doEndUserSessionRequest(client,
                                                    this.sessionUsername,
                                                    this.sessionId.toString());
    }

    /**
     * Creates a UserSession from a session header string. This UserSession
     * is presumed valid if it has the correct format {username};{sessionId}
     * but is not checked server side until the new server call.
     * @param sessionHeader HttpHeader of the format: {username};{sessionId}
     */
    public static UserSession fromSessionHeader(String sessionHeader)
        throws ClientException {

        if (sessionHeader == null) {
            throw new ClientException(ClientStatus.HTTP_INVALID_SESSION);
        }

        String[] sessionParams = sessionHeader.split(";");

        if (sessionParams.length != 2) {
            throw new ClientException(ClientStatus.HTTP_INVALID_SESSION);
        }

        try {
            return new UserSession(sessionParams[0], UUID.fromString(sessionParams[1]));
        } catch (IllegalArgumentException ex) {
            throw new ClientException(ClientStatus.HTTP_INVALID_SESSION);
        }
    }

    /**
     * Serializes a UserSession as a Http Pinata session header.
     * DANGER: Be careful with this! This is an application secret!
     * @return {username};{sessionId}
     */
    public String toSessionHeader() {
        return String.format("%s;%s",
                             this.sessionUsername,
                             this.sessionId.toString());
    }

    /**
     * Creates new UserSession object. This operation is restricted to
     * private members on purpose.
     * @param username Session owner.
     * @param sessionId Unique session id.
     */
    private UserSession(String username, UUID sessionId) {
        this.sessionUsername = username;
        this.sessionId = sessionId;
    }
}
